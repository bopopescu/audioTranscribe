package com.prayagad.speech.utils;

import android.media.AudioRecord;
import android.support.annotation.Nullable;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.google.cloud.speech.v1beta1.StreamingRecognizeResponse;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.TextFormat;
import com.google.protobuf.util.JsonFormat;

import io.grpc.stub.StreamObserver;

/**
 * Created by skishore on 6/1/17.
 */

public class GoogleStreamResponseListener implements StreamObserver<StreamingRecognizeResponse> {


    private final RNGoogleSpeechWrapper baseModule;

    public GoogleStreamResponseListener(RNGoogleSpeechWrapper baseModule) {
        this.baseModule = baseModule;

    }

    @Override
    public void onNext(StreamingRecognizeResponse response) {

        try {
            System.out.println("Received response: " + JsonFormat.printer().print(response));
            sendEvent("onTranslatedSpeechEvent", JsonFormat.printer().print(response));
        } catch (InvalidProtocolBufferException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onError(Throwable error) {
        try {
            if (error instanceof io.grpc.StatusRuntimeException) {
                baseModule.stopRecording();
                baseModule.startRecording();
                sendEvent("onTranslatedSpeechRestart", "Recoverable Error.Restarting App");
            } else {
                baseModule.stopRecording();
                sendEvent("onTranslatedSpeechError", "UnRecoverable Error" + error.getMessage());
            }

        } catch (Exception e) {
            e.printStackTrace();
            sendEvent("onTranslatedSpeechError", "UnRecoverable Error. Restart App" + e.getMessage());
        }
    }

    @Override
    public void onCompleted() {
        sendEvent("onTranslatedSpeechCompleted", "success");

    }

    // This module sends the events to JavaScript world. We would need to subscribe to these events
    // using DeviceEventEmitter in JS.
    private void sendEvent(String eventName, @Nullable Object eventData) {
        WritableMap response = Arguments.createMap();
        response.putString("result", eventData.toString());
        baseModule.getContext().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(eventName, response);
    }
}
